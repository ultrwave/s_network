{"version":3,"sources":["components/Content/Profile/MyPosts/MyPosts.module.css","components/Content/Profile/Profile.module.css","components/Header/Header.module.css","components/Content/Profile/MyPosts/Post/Post.module.css","components/Content/Dialogs/Dialogs.module.css","components/Header/Header.tsx","components/Navbar/FriendsOnline/FriendsOnline.tsx","components/Navbar/Navbar.tsx","components/Content/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.tsx","components/Content/Profile/MyPosts/Post/Post.tsx","components/Content/Profile/MyPosts/MyPostsContainer.tsx","components/Content/Profile/MyPosts/MyPosts.tsx","components/Content/Profile/Profile.tsx","components/Content/News/News.tsx","components/Content/Music/Music.tsx","components/Content/Settings/Settings.tsx","redux/store.tsx","redux/dialogs-reducer.tsx","components/Content/Dialogs/DialogItem/DialogItem.tsx","components/Content/Dialogs/Message/Message.tsx","components/Content/Dialogs/DialogsContainer.tsx","components/Content/Dialogs/Dialogs.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.tsx","index.tsx","components/Navbar/Navbar.module.css"],"names":["module","exports","Header","className","Style","header","src","alt","FriendsOnline","friendsTitle","friendsOnline","friend","friendAvatar","friendName","Navbar","NavbarItem","props","item","to","activeClassName","activeLink","title","navbar","navbarItems","ProfileInfo","profileImg","description","console","log","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","postsData","id","v1","message","likesCount","newPostText","profileReducer","state","action","type","newPost","newState","text","Post","MyPostsContainer","connect","pageProfile","dispatch","inputHandler","updateNewPostTextAC","addPost","ref","current","value","trim","focus","posts","map","p","newPostRef","createRef","postButton","addPostSection","onChange","e","target","onClick","Profile","content","News","Music","Settings","dialogItemId1","dialogItemId2","dialogItemId3","dialogItemId4","dialogItems","name","dialogMessagesData1","isMine","dialogMessagesData2","dialogMessagesData3","dialogMessagesData4","dialogsData","ADD_MESSAGE","UPDATE_NEW_MESSAGE_TEXT","SET_DIALOG_ID","activeDialogId","newMessageText","updateNewMessageTextAC","dialogsReducer","newMessage","dialogId","DialogItem","path","dialog","avatar","callback","Message","messageClass","mineMessage","msgAvatarUrl","msgName","msgAvatar","messageBox","time","DialogsContainer","pageDialogs","setDialogId","setDialogIdAC","addMessage","newMessageRef","shiftKey","addMessageAC","currentTarget","focusHandler","blurHandler","d","messages","m","dialogs","dialogsItems","dialogContent","addMessageSection","onFocus","onBlur","newMessageButton","App","render","profile","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","globalRender","ReactDOM","StrictMode","document","getElementById","getState","subscribe"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,KAAO,sBAAsB,MAAQ,uBAAuB,WAAa,8B,mBCA5ID,EAAOC,QAAU,CAAC,WAAa,4BAA4B,YAAc,+B,mBCAzED,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,KAAO,qB,4DCAzBD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,cAAgB,+BAA+B,OAAS,wBAAwB,aAAe,8BAA8B,WAAa,4BAA4B,SAAW,0BAA0B,QAAU,yBAAyB,UAAY,2BAA2B,WAAa,4BAA4B,KAAO,sBAAsB,KAAO,sBAAsB,KAAO,sBAAsB,YAAc,6BAA6B,kBAAoB,mCAAmC,iBAAmB,oC,iLCEzlB,SAASC,IACZ,OACI,wBAAQC,UAAWC,IAAMC,OAAzB,SACI,qBAAKC,IAAI,iEAAiEC,IAAI,W,oBCHnF,SAASC,IACZ,OACI,gCACI,oBAAIL,UAAWC,IAAMK,aAArB,4BACA,sBAAKN,UAAWC,IAAMM,cAAtB,UACI,sBAAKP,UAAWC,IAAMO,OAAtB,UACI,qBAAKR,UAAWC,IAAMQ,eACtB,sBAAMT,UAAWC,IAAMS,WAAvB,oBAEJ,sBAAKV,UAAWC,IAAMO,OAAtB,UACI,qBAAKR,UAAWC,IAAMQ,eACtB,sBAAMT,UAAWC,IAAMS,WAAvB,qBAEJ,sBAAKV,UAAWC,IAAMO,OAAtB,UACI,qBAAKR,UAAWC,IAAMQ,eACtB,sBAAMT,UAAWC,IAAMS,WAAvB,2BCNb,SAASC,IAEZ,SAASC,EAAWC,GAChB,OACI,qBAAKb,UAAWC,IAAMa,KAAtB,SACI,cAAC,IAAD,CAASC,GAAIF,EAAME,GACVC,gBAAiBf,IAAMgB,WADhC,SAEKJ,EAAMK,UAMvB,OACI,sBAAKlB,UAAWC,IAAMkB,OAAtB,UACI,sBAAKnB,UAAWC,IAAMmB,YAAtB,UACI,cAACR,EAAD,CAAYG,GAAG,WAAWG,MAAM,YAChC,cAACN,EAAD,CAAYG,GAAG,WAAWG,MAAM,YAChC,cAACN,EAAD,CAAYG,GAAG,QAAQG,MAAM,SAC7B,cAACN,EAAD,CAAYG,GAAG,YAAYG,MAAM,gBAErC,cAACb,EAAD,O,qBC3BL,SAASgB,EAAYR,GAExB,OACI,gCACI,8BACI,qBAAKV,IAAI,kEAAkEC,IAAI,GAAGJ,UAAWC,IAAMqB,eAEvG,sBAAKtB,UAAWC,IAAMsB,YAAtB,UACI,gDACCC,QAAQC,IAAI,kB,4BCTvBC,EAAW,WACXC,EAAuB,uBAOzBC,EAAe,CACfC,UAAW,CACP,CAACC,GAAIC,cAAMC,QAAS,sBAAwBC,WAAY,IACxD,CAACH,GAAIC,cAAMC,QAAS,SAAUC,WAAY,KAC1C,CAACH,GAAIC,cAAMC,QAAS,YAAaC,WAAY,IAEjDC,YAAa,IA2CFC,EAxCQ,WAA8E,IAA7EC,EAA4E,uDAArDR,EAAcS,EAAuC,uCAEhG,OAAQA,EAAOC,MAEX,KAAKZ,EACD,IAAIa,EAAyB,CACzBT,GAAIC,cACJC,QAASI,EAAMF,YACfD,WAAY,GAEZO,EAAQ,eAAOJ,GAGnB,OAFAI,EAASX,UAAT,CAAsBU,GAAtB,mBAAkCH,EAAMP,YACxCW,EAASN,YAAc,GAChBM,EAEX,KAAKb,EACD,OAAO,2BACAS,GADP,IAEIF,YAAaG,EAAOI,OAG5B,QACI,OAAOL,I,kCCrCZ,SAASM,EAAK7B,GACjB,OACI,sBAAKb,UAAWC,IAAMa,KAAtB,UACI,qBAAKX,IAAI,sEAAsEC,IAAI,WACnF,+BAAOS,EAAMmB,UACb,8BACI,0CAAanB,EAAMoB,WAAnB,kB,YCmBHU,EAAmBC,aArBR,SAACR,GACrB,OAAOA,EAAMS,eAGU,SAACC,GACxB,MAAO,CACHC,aAAc,SAACN,GACXK,EFoCuB,SAACL,GAChC,MAAO,CACHH,KAAMX,EACNc,KAAMA,GEvCOO,CAAoBP,KAEjCQ,QAAS,SAACC,GAAc,IAAD,EACfT,EAAI,UAAGS,EAAIC,eAAP,aAAG,EAAaC,MACpBX,GAAQA,EAAKY,SACbP,EF0BL,CACHR,KAAMZ,IE1BMwB,EAAIC,SAAWD,EAAIC,QAAQC,OAC3BF,EAAIC,QAAQG,aAOAV,ECrBzB,SAAiB/B,GAEpB,IAAM0C,EAAQ1C,EAAMgB,UAAU2B,KAAI,SAAAC,GAAC,OAAI,cAACf,EAAD,CAAiBV,QAASyB,EAAEzB,QAASC,WAAYwB,EAAExB,YAAxCwB,EAAE3B,OAE9C4B,EAAaC,sBAQnB,OACI,gCACI,sBAAM3D,UAAWC,IAAM2D,WAAvB,sBACA,sBAAK5D,UAAWC,IAAM4D,eAAtB,UACI,0BAAUX,IAAKQ,EACL1D,UAAWC,IAAMwC,KACjBW,MAAOvC,EAAMqB,YACb4B,SAXD,SAACC,GAClBlD,EAAMkC,aAAagB,EAAEC,OAAOZ,UAYpB,wBAAQpD,UAAWC,IAAM2D,WAAYK,QAfjC,kBAAMpD,EAAMoC,QAAQS,IAexB,8BAEJ,qBAAK1D,UAAWC,IAAMsD,MAAtB,SACKA,UCtBV,SAASW,IAEZ,OACI,sBAAKlE,UAAWC,IAAMkE,QAAtB,UACI,cAAC9C,EAAD,IACA,cAACsB,EAAD,OCZL,SAASyB,EAAKvD,GACjB,OACI,uCCFD,SAASwD,EAAMxD,GAClB,OACI,wCCFD,SAASyD,EAASzD,GACrB,OACI,2C,cCuDF0D,EAAgBxC,cAChByC,EAAgBzC,cAChB0C,EAAgB1C,cAChB2C,EAAgB3C,cAET4C,EAAqC,CAC9C,CAAC7C,GAAIyC,EAAeK,KAAM,YAC1B,CAAC9C,GAAI0C,EAAeI,KAAM,YAC1B,CAAC9C,GAAI2C,EAAeG,KAAM,YAC1B,CAAC9C,GAAI4C,EAAeE,KAAM,aAGxBC,EAA8C,CAChD,CAAC/C,GAAIC,cAAM+C,QAAQ,EAAM9C,QAAS,OAClC,CAACF,GAAIC,cAAM+C,QAAQ,EAAO9C,QAAS,UACnC,CAACF,GAAIC,cAAM+C,QAAQ,EAAM9C,QAAS,aAClC,CAACF,GAAIC,cAAM+C,QAAQ,EAAM9C,QAAS,aAClC,CAACF,GAAIC,cAAM+C,QAAQ,EAAO9C,QAAS,QAGjC+C,EAA8C,CAChD,CAACjD,GAAIC,cAAM+C,QAAQ,EAAO9C,QAAS,SACnC,CAACF,GAAIC,cAAM+C,QAAQ,EAAM9C,QAAS,UAClC,CAACF,GAAIC,cAAM+C,QAAQ,EAAO9C,QAAS,UACnC,CAACF,GAAIC,cAAM+C,QAAQ,EAAM9C,QAAS,UAGhCgD,EAA8C,CAChD,CAAClD,GAAIC,cAAM+C,QAAQ,EAAO9C,QAAS,UACnC,CAACF,GAAIC,cAAM+C,QAAQ,EAAO9C,QAAS,YACnC,CAACF,GAAIC,cAAM+C,QAAQ,EAAM9C,QAAS,WAGhCiD,EAA8C,CAChD,CAACnD,GAAIC,cAAM+C,QAAQ,EAAO9C,QAAS,UACnC,CAACF,GAAIC,cAAM+C,QAAQ,EAAO9C,QAAS,WAG1BkD,GAA4B,mBACpCX,EAAgBM,GADoB,cAEpCL,EAAgBO,GAFoB,cAGpCN,EAAgBO,GAHoB,cAIpCN,EAAgBO,GAJoB,GAOnCpD,EAAkC,CACpC,CAACC,GAAIC,cAAMC,QAAS,sBAAwBC,WAAY,IACxD,CAACH,GAAIC,cAAMC,QAAS,SAAUC,WAAY,KAC1C,CAACH,GAAIC,cAAMC,QAAS,YAAaC,WAAY,ICtG3CkD,GD8GgB,GAAD,OAAMtD,GAKH,GAAD,OAAM8C,GACD,UAAIA,GAAa,GAAG7C,GCpH5B,eACdsD,EAA0B,0BAC1BC,EAAgB,gBAShBzD,GAAe,CACjBsD,YAAaA,EACbP,YAAY,YAAKA,GACjBW,eAAgB,YAAIX,GAAa,GAAG7C,GACpCyD,eAAgB,iCA+CPC,GAAyB,SAAC/C,GACnC,MAAO,CACHH,KAAM8C,EACN3C,KAAMA,IAWCgD,GA1DQ,WAA8E,IAA7ErD,EAA4E,uDAArDR,GAAcS,EAAuC,uCAEhG,OAAQA,EAAOC,MAEX,KAAK6C,EACD,IAAIO,EAA8B,CAC9B5D,GAAIC,cACJ+C,OAAQzC,EAAOyC,OACf9C,QAASI,EAAMmD,gBAEQ,kCAAvBG,EAAW1D,UACX0D,EAAW1D,QAAU,gBAEzB,IAAIQ,EAAQ,eAAOJ,GAGnB,OAFAI,EAAS0C,YAAY7C,EAAOsD,UAA5B,CAAyCD,GAAzC,mBAAwDlD,EAAS0C,YAAY7C,EAAOsD,YACpFnD,EAAS+C,eAAiB,GACnB/C,EAGX,KAAK4C,EACD,OAAO,2BACAhD,GADP,IAEImD,eAAgBlD,EAAOI,OAG/B,KAAK4C,EACD,OAAO,2BACAjD,GADP,IAEIkD,eAAgBjD,EAAOP,KAG/B,QACI,OAAOM,I,mBClDZ,SAASwD,GAAY/E,GAExB,IAAIgF,EAAe,YAAchF,EAAM8E,SAIvC,OACI,sBAAK3F,UAAWC,KAAM6F,OAAtB,UACI,qBAAK9F,UAAWC,KAAM8F,OAAQ5F,IAAI,2EAClC,cAAC,IAAD,CAASY,GAAI8E,EAAM5B,QALC,WAAQpD,EAAMmF,SAASnF,EAAM8E,WAKA3E,gBAAiBf,KAAMgB,WAAxE,SAAqFJ,EAAM+D,UCVhG,SAASqB,GAAQpF,GAEpB,IAAMqF,EAAejG,KAAM+B,SAAWnB,EAAMiE,OAAS,IAAM7E,KAAMkG,YAAe,IAM1EC,EAAgBvF,EAAMiE,OAJR,sEAEI,kLAIlBuB,EAAUxF,EAAMiE,OAAQ,KAAO,SAErC,OACI,sBAAK9E,UAAWkG,EAAhB,UACI,qBAAKlG,UAAWC,KAAMqG,UAAWnG,IAAKiG,EAAchG,IAAI,WACxD,sBAAKJ,UAAWC,KAAMsG,WAAtB,UACI,sBAAMvG,UAAWC,KAAM2E,KAAvB,SAA8ByB,IAC9B,mBAAGrG,UAAWC,KAAMwC,KAApB,SAA2B5B,EAAMmB,UACjC,sBAAMhC,UAAWC,KAAMuG,KAAvB,yBCPhB,IAsCaC,GAAmB7D,aAtCR,SAACR,GACrB,OAAOA,EAAMsE,eAGU,SAAC5D,GACxB,MAAO,CACH6D,YAAa,SAAC7E,GACVgB,EHoDiB,SAAChB,GAC1B,MAAO,CACHQ,KAAM+C,EACNvD,GAAIA,GGvDS8E,CAAc9E,KAE3B+E,WAAY,SAAC9C,EAAwC+C,EAAoBnB,GAAsB,IAAD,EACtFlD,EAAI,UAAGqE,EAAc3D,eAAjB,aAAG,EAAuBC,MAC9B0B,GAAS,EACTrC,GAAQA,EAAKY,SACTU,EAAEgD,WACFjC,GAAS,GAEbhC,EH4BY,SAAC6C,EAAkBb,GAC3C,MAAO,CACHxC,KAAM6C,EACNQ,SAAUA,EACVb,OAAQA,GGhCSkC,CAAarB,EAAUb,IAC5BgC,EAAc3D,SAAW2D,EAAc3D,QAAQC,OAC/C0D,EAAc3D,QAAQG,UAIlCP,aAAc,SAACgB,GACXjB,EAAS0C,GAAuBzB,EAAEkD,cAAc7D,SAEpD8D,aAAc,SAACnD,GACmB,kCAA1BA,EAAEkD,cAAc7D,OAChBN,EAAS0C,GAAuB,MAGxC2B,YAAa,SAACpD,GACLA,EAAEkD,cAAc7D,MAAMC,QACvBP,EAAS0C,GAAuB,sCAMhB5C,ECxCzB,SAAiB/B,GAEpB,IAAM8D,EAAc9D,EAAM8D,YAAYnB,KAAI,SAAA4D,GAAC,OAAI,cAACxB,GAAD,CAE3CD,SAAUyB,EAAEtF,GACZ8C,KAAMwC,EAAExC,KACRoB,SAAUnF,EAAM8F,aAHXS,EAAEtF,OAMLuF,EAAWxG,EAAMqE,YAAYrE,EAAMyE,gBAAgB9B,KAAI,SAAC8D,GAAD,OAAwB,cAACrB,GAAD,CAEjFnE,GAAIwF,EAAExF,GACNgD,OAAQwC,EAAExC,OACV9C,QAASsF,EAAEtF,SAHNsF,EAAExF,OAMLgF,EAAgBnD,sBAMhBZ,EAAelC,EAAMkC,aAErBmE,EAAerG,EAAMqG,aAErBC,EAActG,EAAMsG,YAE1B,OACI,sBAAKnH,UAAWC,KAAMsH,QAAtB,UACK/F,QAAQC,IAAI,oBACb,qBAAKzB,UAAWC,KAAMuH,aAAtB,SACK7C,IAEL,sBAAK3E,UAAWC,KAAMwH,cAAtB,UACI,qBAAKzH,UAAWC,KAAM6F,OAAtB,SACI,qBAAK9F,UAAWC,KAAMoH,SAAtB,SACKA,MAGT,sBAAKrH,UAAWC,KAAMyH,kBAAtB,UAEI,0BAAUxE,IAAK4D,EACL9G,UAAWC,KAAMwC,KACjBW,MAAOvC,EAAM0E,eACbzB,SAAUf,EACV4E,QAAST,EACTU,OAAQT,IAGlB,wBACInH,UAAWC,KAAM4H,iBACjB5D,QAlCD,SAACF,GAChBlD,EAAMgG,WAAW9C,EAAG+C,EAAejG,EAAMyE,iBA+B7B,8BCVLwC,OA/Bf,WAEO,IAAMP,EAAU,cAAC,IAAD,CAAO1B,KAAK,WAAWkC,OAAQ,kBAAM,cAACtB,GAAD,OAMlDuB,EAAU,cAAC,IAAD,CAAOnC,KAAK,WAAWkC,OAAQ,kBAAM,cAAC7D,EAAD,OAMrD,OACI,cAAC,IAAD,UACI,sBAAKlE,UAAU,cAAf,UACI,cAACD,EAAD,IACA,cAACY,EAAD,IACA,sBAAKX,UAAU,sBAAf,UACKuH,EACAS,EACD,cAAC,IAAD,CAAOnC,KAAK,QAAQoC,UAAW7D,IAC/B,cAAC,IAAD,CAAOyB,KAAK,SAASoC,UAAW5D,IAChC,cAAC,IAAD,CAAOwB,KAAK,YAAYoC,UAAW3D,aCrCxC4D,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCLVQ,GAAWC,aAAgB,CAC3B/F,YAAaV,EACbuE,YAAajB,KAMFoD,GAFHC,aAAYH,ICDXI,GAAe,SAAC3G,GACzB4G,IAASjB,OACL,cAAC,IAAMkB,WAAP,UACI,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SACI,cAAC,GAAD,QAMRK,SAASC,eAAe,UAIhCJ,GAAaF,GAAMO,YAEnBP,GAAMQ,WAAU,WACZ,IAAIjH,EAAQyG,GAAMO,WAClBL,GAAa3G,MAKjB8F,M,kBC/BArI,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,WAAa,2BAA2B,aAAe,6BAA6B,cAAgB,8BAA8B,OAAS,uBAAuB,aAAe,6BAA6B,WAAa,8B","file":"static/js/main.8c57dd9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPostSection\":\"MyPosts_addPostSection__3MRgr\",\"text\":\"MyPosts_text__3OgMK\",\"posts\":\"MyPosts_posts__JRpx4\",\"postButton\":\"MyPosts_postButton__3vU2g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileImg\":\"Profile_profileImg__PQ3Db\",\"description\":\"Profile_description__10vnR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1NCrN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3mGg9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__dO14I\",\"dialog\":\"Dialogs_dialog__3sc7t\",\"dialogContent\":\"Dialogs_dialogContent__t8aqI\",\"avatar\":\"Dialogs_avatar__2X1bz\",\"dialogsItems\":\"Dialogs_dialogsItems__2bWrF\",\"activeLink\":\"Dialogs_activeLink__tzILA\",\"messages\":\"Dialogs_messages__1Skl5\",\"message\":\"Dialogs_message__1KdX7\",\"msgAvatar\":\"Dialogs_msgAvatar__2vpzI\",\"messageBox\":\"Dialogs_messageBox__2WzUr\",\"name\":\"Dialogs_name__1FI5b\",\"text\":\"Dialogs_text__1vEl8\",\"time\":\"Dialogs_time__Noyq6\",\"mineMessage\":\"Dialogs_mineMessage__3Seqf\",\"addMessageSection\":\"Dialogs_addMessageSection__1hkyw\",\"newMessageButton\":\"Dialogs_newMessageButton__3HXmk\"};","import React from 'react';\r\nimport Style from './Header.module.css';\r\n\r\nexport function Header() {\r\n    return (\r\n        <header className={Style.header}>\r\n            <img src=\"https://www.flaticon.com/svg/static/icons/svg/1649/1649063.svg\" alt=\"logo\"/>\r\n        </header>\r\n    )\r\n}\r\n","import Style from '../Navbar.module.css';\r\nimport React from 'react';\r\n\r\nexport function FriendsOnline() {\r\n    return (\r\n        <div>\r\n            <h2 className={Style.friendsTitle}>Friends online</h2>\r\n            <div className={Style.friendsOnline}>\r\n                <div className={Style.friend}>\r\n                    <div className={Style.friendAvatar}></div>\r\n                    <span className={Style.friendName}>Joe</span>\r\n                </div>\r\n                <div className={Style.friend}>\r\n                    <div className={Style.friendAvatar}></div>\r\n                    <span className={Style.friendName}>Jack</span>\r\n                </div>\r\n                <div className={Style.friend}>\r\n                    <div className={Style.friendAvatar}></div>\r\n                    <span className={Style.friendName}>Jane</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Style from './Navbar.module.css';\r\nimport {FriendsOnline} from './FriendsOnline/FriendsOnline';\r\n\r\ntype NavbarItemPropsType = {\r\n    to: string\r\n    title: string\r\n}\r\n\r\n\r\n\r\nexport function Navbar() {\r\n\r\n    function NavbarItem(props: NavbarItemPropsType) {\r\n        return (\r\n            <div className={Style.item}>\r\n                <NavLink to={props.to}\r\n                         activeClassName={Style.activeLink}>\r\n                    {props.title}\r\n                </NavLink>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <nav className={Style.navbar}>\r\n            <div className={Style.navbarItems}>\r\n                <NavbarItem to='/profile' title='Profile'/>\r\n                <NavbarItem to='/dialogs' title='Dialogs'/>\r\n                <NavbarItem to='/news' title='News'/>\r\n                <NavbarItem to='/settings' title='Settings'/>\r\n            </div>\r\n            <FriendsOnline/>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport Style from '../Profile.module.css';\r\n\r\ntype ProfileInfoProps = {\r\n}\r\n\r\nexport function ProfileInfo(props: ProfileInfoProps) {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src=\"http://www.imageonemri.ca/image/w2000-c5:2/files/58532088_l.jpg\" alt=\"\" className={Style.profileImg}/>\r\n            </div>\r\n            <div className={Style.description}>\r\n                <span>Profile info</span>\r\n                {console.log('rerender')}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {\r\n    ActionTypes,\r\n    PostsDataType,\r\n} from './store';\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\r\n\r\ntype PageStateType = {\r\n    postsData: Array<PostsDataType>\r\n    newPostText: string\r\n}\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: v1(), message: 'It\\'s my first post!', likesCount: 12},\r\n        {id: v1(), message: 'Hello!', likesCount: 432},\r\n        {id: v1(), message: 'Good day!', likesCount: 2}\r\n    ],\r\n    newPostText: ''\r\n}\r\n\r\nconst profileReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ADD_POST: // Add post (profile)\r\n            let newPost: PostsDataType = {\r\n                id: v1(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            let newState = {...state}\r\n            newState.postsData = [newPost, ...state.postsData]\r\n            newState.newPostText = ''\r\n            return newState\r\n\r\n        case UPDATE_NEW_POST_TEXT: // New post input\r\n            return {\r\n                ...state,\r\n                newPostText: action.text\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostAC = () => {\r\n    return {\r\n        type: ADD_POST\r\n    } as const\r\n}\r\n\r\nexport const updateNewPostTextAC = (text: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        text: text\r\n    } as const\r\n\r\n}\r\n\r\nexport default profileReducer","import React from 'react';\r\nimport Style from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string;\r\n    likesCount: number;\r\n}\r\n\r\nexport function Post(props: PropsType) {\r\n    return (\r\n        <div className={Style.item}>\r\n            <img src=\"https://www.teenvio.com/es/wp-content/uploads/2018/03/man-2-512.png\" alt=\"avatar\"/>\r\n            <span>{props.message}</span>\r\n            <div>\r\n                <span>Like ({props.likesCount} likes)</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {ActionTypes, PostsDataType, StateType} from '../../../../redux/store';\r\nimport {addPostAC, updateNewPostTextAC} from '../../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MyPostsType = {\r\n    postsData: Array<PostsDataType>\r\n    newPostText: string\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return state.pageProfile\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => { // todo: fix type\r\n    return {\r\n        inputHandler: (text: string) => {\r\n            dispatch(updateNewPostTextAC(text))\r\n        },\r\n        addPost: (ref: any) => {\r\n            let text = ref.current?.value\r\n            if (text && text.trim()) {\r\n                dispatch(addPostAC())\r\n                if (ref.current && ref.current.value) {\r\n                    ref.current.focus()\r\n                }\r\n            }\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent, createRef, ReactComponentElement, ReactElement} from 'react';\r\nimport Style from './MyPosts.module.css';\r\nimport {Post} from './Post/Post';\r\nimport {PostsDataType} from '../../../../redux/store';\r\n\r\ntype MyPostsType = {\r\n    postsData: Array<PostsDataType>\r\n    inputHandler: (text: string) => void\r\n    newPostText: string\r\n    addPost: (ref: any) => void // todo: fix type\r\n}\r\n\r\nexport function MyPosts(props: MyPostsType) {\r\n\r\n    const posts = props.postsData.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const newPostRef = createRef<HTMLTextAreaElement>()\r\n\r\n    const addPost = () => props.addPost(newPostRef)\r\n\r\n    const inputHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.inputHandler(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span className={Style.postButton}>My Posts</span>\r\n            <div className={Style.addPostSection}>\r\n                <textarea ref={newPostRef}\r\n                          className={Style.text}\r\n                          value={props.newPostText}\r\n                          onChange={inputHandler}\r\n                />\r\n                <button className={Style.postButton} onClick={addPost}>Send new post</button>\r\n            </div>\r\n            <div className={Style.posts}>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Style from './Profile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {ActionTypes, PostsDataType} from '../../../redux/store';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\n\r\ntype ProfileType = {\r\n    data: {\r\n        postsData: Array<PostsDataType>\r\n        newPostText: string\r\n    }\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nexport function Profile() {\r\n\r\n    return (\r\n        <div className={Style.content}>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer\r\n                // postsData={props.data.postsData}\r\n                // newPostText={props.data.newPostText}\r\n                // dispatch={props.dispatch}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Style from './News.module.css';\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport function News(props: PropsType) {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Style from './Music.module.css';\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport function Music(props: PropsType) {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Style from './Settings.module.css';\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport function Settings(props: PropsType) {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import {v1} from 'uuid';\r\nimport profileReducer, {addPostAC, updateNewPostTextAC} from './profile-reducer';\r\nimport dialogsReducer, {addMessageAC, setDialogIdAC, updateNewMessageTextAC} from './dialogs-reducer';\r\n\r\n\r\n//======== TYPES ======================================================\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    _callSubscriber: (s: StateType) => void\r\n    getState: () => StateType\r\n    subscribe: (callback: () => void) => void\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nexport type StateType = {\r\n    pageProfile: {\r\n        postsData: Array<PostsDataType>\r\n        newPostText: string\r\n    }\r\n    pageDialogs: {\r\n        dialogsData: DialogsDataType\r\n        dialogItems: Array<DialogItemType>\r\n        activeDialogId: string\r\n        newMessageText: string\r\n    }\r\n}\r\n\r\nexport type DialogsDataType = {\r\n    [id: string]: Array<MessageDataType>\r\n}\r\n\r\nexport type DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type MessageDataType = {\r\n    id: string\r\n    isMine: boolean\r\n    message: string\r\n}\r\n\r\nexport type PostsDataType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type PageProfileActionType =\r\n    ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof updateNewPostTextAC>\r\n\r\nexport type PageDialogsActionType =\r\n    ReturnType<typeof addMessageAC> |\r\n    ReturnType<typeof updateNewMessageTextAC> |\r\n    ReturnType<typeof setDialogIdAC>\r\n\r\nexport type ActionTypes =\r\n    PageProfileActionType |\r\n    PageDialogsActionType\r\n\r\n//======== DATA ======================================================\r\n\r\nconst dialogItemId1 = v1()\r\nconst dialogItemId2 = v1()\r\nconst dialogItemId3 = v1()\r\nconst dialogItemId4 = v1()\r\n\r\nexport const dialogItems: Array<DialogItemType> = [\r\n    {id: dialogItemId1, name: 'Friend 1'},\r\n    {id: dialogItemId2, name: 'Friend 2'},\r\n    {id: dialogItemId3, name: 'Friend 3'},\r\n    {id: dialogItemId4, name: 'Friend 4'},\r\n]\r\n\r\nconst dialogMessagesData1: Array<MessageDataType> = [\r\n    {id: v1(), isMine: true, message: 'Hi!'},\r\n    {id: v1(), isMine: false, message: 'Hello!'},\r\n    {id: v1(), isMine: true, message: 'Whats up?'},\r\n    {id: v1(), isMine: true, message: 'Good day!'},\r\n    {id: v1(), isMine: false, message: 'Yo!'}\r\n]\r\n\r\nconst dialogMessagesData2: Array<MessageDataType> = [\r\n    {id: v1(), isMine: false, message: 'Apple'},\r\n    {id: v1(), isMine: true, message: 'Peanut'},\r\n    {id: v1(), isMine: false, message: 'Banana'},\r\n    {id: v1(), isMine: true, message: 'Peach'},\r\n]\r\n\r\nconst dialogMessagesData3: Array<MessageDataType> = [\r\n    {id: v1(), isMine: false, message: 'Tomato'},\r\n    {id: v1(), isMine: false, message: 'Cucumber'},\r\n    {id: v1(), isMine: true, message: 'Carrot'},\r\n]\r\n\r\nconst dialogMessagesData4: Array<MessageDataType> = [\r\n    {id: v1(), isMine: false, message: 'Winter'},\r\n    {id: v1(), isMine: false, message: 'Spring'},\r\n]\r\n\r\nexport const dialogsData: DialogsDataType = {\r\n    [dialogItemId1]: dialogMessagesData1,\r\n    [dialogItemId2]: dialogMessagesData2,\r\n    [dialogItemId3]: dialogMessagesData3,\r\n    [dialogItemId4]: dialogMessagesData4\r\n}\r\n\r\nconst postsData: Array<PostsDataType> = [\r\n    {id: v1(), message: 'It\\'s my first post!', likesCount: 12},\r\n    {id: v1(), message: 'Hello!', likesCount: 432},\r\n    {id: v1(), message: 'Good day!', likesCount: 2}\r\n]\r\n\r\n//========= STORE =====================================================\r\n\r\nconst store: StoreType = {\r\n    _state: {\r\n        pageProfile: {\r\n            postsData: [...postsData],\r\n            newPostText: '',\r\n        },\r\n        pageDialogs: {\r\n            dialogsData: dialogsData,\r\n            dialogItems: [...dialogItems],\r\n            activeDialogId: [...dialogItems][0].id,\r\n            newMessageText: 'Shift+click to send as friend',\r\n        }\r\n    },\r\n    _callSubscriber(s: StateType) {\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    subscribe(observer: () => void) {\r\n        this._callSubscriber = observer\r\n    },\r\n\r\n    dispatch(action: ActionTypes) {\r\n\r\n        this._state.pageProfile = profileReducer(this._state.pageProfile, action)\r\n        this._state.pageDialogs = dialogsReducer(this._state.pageDialogs, action)\r\n\r\n        this._callSubscriber(this._state)\r\n\r\n    }\r\n}\r\n\r\nexport default store\r\n\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {\r\n    ActionTypes,\r\n    DialogItemType,\r\n    DialogsDataType,\r\n    MessageDataType,\r\n    dialogsData,\r\n    dialogItems\r\n} from './store';\r\n\r\nconst ADD_MESSAGE = 'ADD-MESSAGE'\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT'\r\nconst SET_DIALOG_ID = 'SET-DIALOG-ID'\r\n\r\ntype PageStateType = {\r\n        dialogsData: DialogsDataType\r\n        dialogItems: Array<DialogItemType>\r\n        newMessageText: string\r\n        activeDialogId: string\r\n}\r\n\r\nconst initialState = {\r\n    dialogsData: dialogsData,\r\n    dialogItems: [...dialogItems],\r\n    activeDialogId: [...dialogItems][0].id,\r\n    newMessageText: 'Shift+click to send as friend',\r\n}\r\n\r\nconst dialogsReducer = (state: PageStateType = initialState, action: ActionTypes): PageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ADD_MESSAGE:\r\n            let newMessage: MessageDataType = {\r\n                id: v1(),\r\n                isMine: action.isMine,\r\n                message: state.newMessageText,\r\n            }\r\n            if (newMessage.message === 'Shift+click to send as friend') {\r\n                newMessage.message = 'New Message!'\r\n            }\r\n            let newState = {...state} // todo - как написать без создания новой переменной?\r\n            newState.dialogsData[action.dialogId] = [newMessage, ...newState.dialogsData[action.dialogId]]\r\n            newState.newMessageText = ''\r\n            return newState\r\n\r\n\r\n        case UPDATE_NEW_MESSAGE_TEXT:\r\n            return {\r\n                ...state,\r\n                newMessageText: action.text\r\n            }\r\n\r\n        case SET_DIALOG_ID:\r\n            return {\r\n                ...state,\r\n                activeDialogId: action.id\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessageAC = (dialogId: string, isMine: boolean) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        dialogId: dialogId,\r\n        isMine: isMine\r\n    } as const\r\n}\r\n\r\nexport const updateNewMessageTextAC = (text: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        text: text\r\n    } as const\r\n}\r\n\r\nexport const setDialogIdAC = (id: string) => {\r\n    return {\r\n        type: SET_DIALOG_ID,\r\n        id: id\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer","import React from 'react';\r\nimport Style from '../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemProps = {\r\n    dialogId: string\r\n    name: string\r\n    callback: (id: string) => void\r\n}\r\n\r\nexport function DialogItem (props: DialogItemProps) {\r\n\r\n    let path: string = '/dialogs/' + props.dialogId;\r\n\r\n    const setDialogIdCallback = () => { props.callback(props.dialogId) }\r\n\r\n    return (\r\n        <div className={Style.dialog}>\r\n            <img className={Style.avatar} src='https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png'></img>\r\n            <NavLink to={path} onClick={setDialogIdCallback} activeClassName={Style.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Style from '../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    id: string\r\n    isMine: boolean\r\n    message: string\r\n}\r\n\r\nexport function Message(props: MessagePropsType) {\r\n\r\n    const messageClass = Style.message + (props.isMine? (' ' + Style.mineMessage) : '')\r\n\r\n    const myAvatarUrl = 'https://kovadm.ru/wp-content/uploads/2020/02/avatar-placeholder.png'\r\n\r\n    const friendAvatarUrl = 'https://media.istockphoto.com/vectors/person-gray-photo-placeholder-woman-vector-id1177794485?b=1&k=6&m=1177794485&s=612x612&w=0&h=8INMsj4jnjSOComnh3-5VJPDxbO2D-0vIz1E92aR4L4='\r\n\r\n    const msgAvatarUrl =  props.isMine? myAvatarUrl : friendAvatarUrl\r\n\r\n    const msgName = props.isMine? 'Me' : 'Friend'\r\n\r\n    return (\r\n        <div className={messageClass}>\r\n            <img className={Style.msgAvatar} src={msgAvatarUrl} alt='avatar'/>\r\n            <div className={Style.messageBox}>\r\n                <span className={Style.name}>{msgName}</span>\r\n                <p className={Style.text}>{props.message}</p>\r\n                <span className={Style.time}>00.01</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {\r\n    ActionTypes,\r\n    DialogItemType,\r\n    DialogsDataType,\r\n    StateType,\r\n} from '../../../redux/store';\r\nimport {addMessageAC, updateNewMessageTextAC, setDialogIdAC} from '../../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\n\r\ntype DialogsContentType = {\r\n    data: {\r\n        dialogItems: Array<DialogItemType>\r\n        dialogsData: DialogsDataType\r\n        newMessageText: string\r\n    }\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return state.pageDialogs\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => { // todo: fix type\r\n    return {\r\n        setDialogId: (id: string) => {\r\n            dispatch(setDialogIdAC(id))\r\n        },\r\n        addMessage: (e: React.MouseEvent<HTMLButtonElement>, newMessageRef: any, dialogId: string) => {\r\n            let text = newMessageRef.current?.value\r\n            let isMine = true\r\n            if (text && text.trim()) {\r\n                if (e.shiftKey) {\r\n                    isMine = false\r\n                }\r\n                dispatch(addMessageAC(dialogId, isMine))\r\n                if (newMessageRef.current && newMessageRef.current.value) {\r\n                    newMessageRef.current.focus()\r\n                }\r\n            }\r\n        },\r\n        inputHandler: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            dispatch(updateNewMessageTextAC(e.currentTarget.value))\r\n        },\r\n        focusHandler: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            if (e.currentTarget.value === 'Shift+click to send as friend') {\r\n                dispatch(updateNewMessageTextAC(''))\r\n            }\r\n        },\r\n        blurHandler: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            if (!e.currentTarget.value.trim()) {\r\n                dispatch(updateNewMessageTextAC('Shift+click to send as friend'))\r\n            }\r\n        },\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)","import React, {ChangeEvent, createRef} from 'react';\r\nimport Style from './Dialogs.module.css';\r\nimport {DialogItemType, DialogsDataType, MessageDataType,} from '../../../redux/store';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\n\r\ntype DialogsContentType = {\r\n    dialogItems: Array<DialogItemType>\r\n    dialogsData: DialogsDataType\r\n    newMessageText: string\r\n    activeDialogId: string\r\n    setDialogId: (id: string) => void\r\n    addMessage: (e: React.MouseEvent<HTMLButtonElement>, ref: any, activeDialogId: string) => void\r\n    inputHandler: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    focusHandler: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    blurHandler: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n}\r\n\r\nexport function Dialogs(props: DialogsContentType) {\r\n\r\n    const dialogItems = props.dialogItems.map(d => <DialogItem\r\n        key={d.id}\r\n        dialogId={d.id}\r\n        name={d.name}\r\n        callback={props.setDialogId}\r\n    />)\r\n\r\n    const messages = props.dialogsData[props.activeDialogId].map((m: MessageDataType) => <Message\r\n        key={m.id}\r\n        id={m.id}\r\n        isMine={m.isMine}\r\n        message={m.message}\r\n    />)\r\n\r\n    const newMessageRef = createRef<HTMLTextAreaElement>()\r\n\r\n    const addMessage = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        props.addMessage(e, newMessageRef, props.activeDialogId)\r\n    }\r\n\r\n    const inputHandler = props.inputHandler\r\n\r\n    const focusHandler = props.focusHandler\r\n\r\n    const blurHandler = props.blurHandler\r\n\r\n    return (\r\n        <div className={Style.dialogs}>\r\n            {console.log('dialogs rendered')}\r\n            <div className={Style.dialogsItems}>\r\n                {dialogItems}\r\n            </div>\r\n            <div className={Style.dialogContent}>\r\n                <div className={Style.dialog}>\r\n                    <div className={Style.messages}>\r\n                        {messages}\r\n                    </div>\r\n                </div>\r\n                <div className={Style.addMessageSection}>\r\n\r\n                    <textarea ref={newMessageRef}\r\n                              className={Style.text}\r\n                              value={props.newMessageText}\r\n                              onChange={inputHandler}\r\n                              onFocus={focusHandler}\r\n                              onBlur={blurHandler}\r\n                    />\r\n\r\n                    <button\r\n                        className={Style.newMessageButton}\r\n                        onClick={addMessage}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Header} from './components/Header/Header';\r\nimport {Navbar} from './components/Navbar/Navbar';\r\nimport {Profile} from './components/Content/Profile/Profile';\r\nimport {News} from './components/Content/News/News';\r\nimport {Music} from './components/Content/Music/Music';\r\nimport {Settings} from './components/Content/Settings/Settings';\r\nimport {ActionTypes, DialogItemType, DialogsDataType, PostsDataType} from './redux/store';\r\nimport {DialogsContainer} from './components/Content/Dialogs/DialogsContainer';\r\n\r\ntype AppStoreType = {\r\n    state: {\r\n        pageProfile: {\r\n            postsData: Array<PostsDataType>\r\n            newPostText: string\r\n        },\r\n        pageDialogs: {\r\n            dialogItems: Array<DialogItemType>\r\n            dialogsData: DialogsDataType\r\n            newMessageText: string\r\n        }\r\n    }\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nfunction App() {\r\n\r\n       const dialogs = <Route path='/dialogs' render={() => <DialogsContainer\r\n        // data={props.state.pageDialogs}\r\n        // dispatch={props.dispatch}\r\n    />}\r\n    />\r\n\r\n    const profile = <Route path='/profile' render={() => <Profile\r\n        // data={props.state.pageProfile}\r\n        // dispatch={props.dispatch}\r\n    />\r\n    }/>\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className='app-wrapper'>\r\n                <Header/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    {dialogs}\r\n                    {profile}\r\n                    <Route path='/news' component={News}/>\r\n                    <Route path='/music' component={Music}/>\r\n                    <Route path='/settings' component={Settings}/>\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\n\r\nlet reducers = combineReducers({\r\n    pageProfile: profileReducer,\r\n    pageDialogs: dialogsReducer\r\n})\r\n\r\n\r\nlet store = createStore(reducers)\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {StateType} from './redux/store';\nimport store from './redux/redux-store'\nimport {Provider} from 'react-redux';\n\nexport const globalRender = (state: StateType) => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <App\n                    // state={state}\n                    // dispatch={store.dispatch.bind(store)}\n                />\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nglobalRender(store.getState())\n\nstore.subscribe(() => {\n    let state = store.getState()\n    globalRender(state)\n})\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2HCv2\",\"item\":\"Navbar_item__3ER6l\",\"activeLink\":\"Navbar_activeLink__7X-Tz\",\"friendsTitle\":\"Navbar_friendsTitle__J9E0W\",\"friendsOnline\":\"Navbar_friendsOnline__3XCCz\",\"friend\":\"Navbar_friend__2_c3q\",\"friendAvatar\":\"Navbar_friendAvatar__22v1R\",\"friendName\":\"Navbar_friendName__N3WSl\"};"],"sourceRoot":""}